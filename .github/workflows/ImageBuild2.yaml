name: nix-build-on-demand-docker
on:
  workflow_dispatch:
  push:
    paths:
      - "**/*.nix"
      - ".github/workflows/ImageBuild2.yaml"

jobs:
  build-sd-image:
    name: Build default image
    runs-on: ubuntu-latest
    outputs:
      iso-name: ${{ steps.vars.outputs.iso-name }}
      tag-name: ${{ steps.vars.outputs.tag-name }}
    env:
      XDG_RUNTIME_DIR: /tmp/skopeo
    steps:
      - uses: actions/checkout@v3.5.3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main

      - uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-23.05
          extra_nix_config: |
            extra-platforms = aarch64-linux

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Cache Image
        id: cache-image
        uses: actions/cache@v3
        with:
          path: output
          key: ${{ runner.os }}-${{ hashFiles('output/**') }}

      - name: Check nix.conf
        run: cat /etc/nix/nix.conf

      - name: Setup variables
        id: vars
        run: |
          build_date=$(date +%Y%m%d%H%M)
          echo "tag-name=${build_date}" >> "$GITHUB_OUTPUT"
          echo "iso-name=ovos-nix-${build_date}-aarch64.img" >> "$GITHUB_OUTPUT"
          echo "build-output=ovos-nix-sd-image-aarch64-linux.img" >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        run: |
          [[ -z "$XDG_RUNTIME_DIR" ]] || mkdir -p $XDG_RUNTIME_DIR
          skopeo login --username ${{ secrets.DOCKERHUB_USER }} --password ${{ secrets.DOCKERHUB_TOKEN }} docker.io

      - name: Debug
        run: |
          echo "${{ steps.vars.outputs.tag-name }}"
          echo "${{ steps.vars.outputs.iso-name }}"
          echo "${{ steps.vars.outputs.build-output }}"

      - name: Register binfmt
        run: |
          docker run --rm --privileged docker.io/multiarch/qemu-user-static --reset -p yes

      - name: Test binfmt availability
        run: |
          cat /proc/sys/fs/binfmt_misc/qemu-aarch64

      - name: Build SD Image
        run: |
          NB=$(which nix-build)
          sudo $NB '<nixpkgs/nixos>'  \
            -A config.system.build.sdImage \
            -I nixos-config=./config/sd-image.nix \
            --argstr system aarch64-linux \
            --option sandbox false

      - name: Move image to cache dir
        run: |
          mkdir -p output
          rm -f output/*.img
          ls -alh ./result/sd-image
          ls -alh ./result/
          ls -alh ./output
          sudo cp ./result/sd-image/* ./output/
