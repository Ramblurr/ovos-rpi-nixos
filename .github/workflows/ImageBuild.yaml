---
name: Build RPI Image
on:
  workflow_dispatch:
  push:
    paths:
      - "**/*.nix"
      - ".github/workflows/ImageBuild.yaml"

jobs:
  build-image:
    name: Build sd-card image
    runs-on: ubuntu-latest
    outputs:
      iso-name: ${{ steps.vars.outputs.iso-name }}
      tag-name: ${{ steps.vars.outputs.tag-name }}
    steps:
      - uses: actions/checkout@v3.5.3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        timeout-minutes: 12

      - name: Cache Image
        id: cache-image
        uses: actions/cache@v3
        with:
          path: output
          key: sd-image-${{ hashFiles('output/*.img') }}

      - name: Setup variables
        id: vars
        run: |
          build_date=$(date +%Y%m%d%H%M)
          echo "tag-name=${build_date}" >> "$GITHUB_OUTPUT"
          echo "iso-name=ovos-nix-${build_date}-aarch64.img" >> "$GITHUB_OUTPUT"
          echo "build-output=ovos-nix-sd-image-aarch64-linux.img" >> "$GITHUB_OUTPUT"

      - name: Debug
        run: |
          echo "${{ steps.vars.outputs.tag-name }}"
          echo "${{ steps.vars.outputs.iso-name }}"
          echo "${{ steps.vars.outputs.build-output }}"

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main

      - name: Pull Images
        run: |
          sudo env PUID=$(id -u) PGID=$(id -g) CI=$CI bash build.sh pull

      #- name: Setup upterm session
      #  uses: lhotari/action-upterm@v1
      #  with:
      #    limit-access-to-actor: true

      - name: Build sd-card image
        run: |
          sudo env PUID=$(id -u) PGID=$(id -g) CI=$CI bash build.sh

      - name: Rename iso
        run: |
          set -ex
          ls -al
          mkdir -p output
          ls -al output
          rm -f output/*.img
          mv ./${{ steps.vars.outputs.build-output }} output/${{ steps.vars.outputs.iso-name }}
          ls -al output

  boot-test:
    name: Test Image
    runs-on: ubuntu-latest
    needs: build-image

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install QEMU and other dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-aarch64

      - name: Load Image Cache
        id: cache-image
        uses: actions/cache@v3
        with:
          path: output
          key: sd-image-${{ hashFiles('output/*.img') }}

      - name: Boot Raspberry Pi Image
        env:
          TAG_NAME: ${{needs.build-image.outputs.tag-name}}
          ISO_NAME: ${{needs.build-image.outputs.iso-name}}
        run: |
          set -ex
          ls
          ls output
          qemu-system-aarch64 -machine help
          timeout 300 qemu-system-aarch64 \
            -M raspi3 \
            -m 1G \
            -kernel kernel7.img \
            -append "rw earlyprintk loglevel=8 console=ttyAMA0,115200 dwc_otg.lpm_enable=0 root=/dev/mmcblk0p2" \
            -sd output/$ISO_NAME \
            -dtb bcm2710-rpi-3-b.dtb \
            -no-reboot \
            -serial stdio  | tee boot.log
          if grep -q "Reached target Multi-User System." boot.log; then
            echo "Booted successfully!"
          else
            echo "Failed to boot!"
            exit 1
          fi

  release-image:
    permissions:
      contents: write
    name: Release Image
    #needs: boot-test
    needs: build-image
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Load Image Cache
        id: cache-image
        uses: actions/cache@v3
        with:
          path: output
          key: sd-image-${{ hashFiles('output/*.img') }}

      - env:
          TAG_NAME: ${{needs.build-image.outputs.tag-name}}
          ISO_NAME: ${{needs.build-image.outputs.iso-name}}
        run: "echo Releasing img=$ISO_NAME tag=$TAG_NAME"

      - name: Compress Image
        run: |
          set -ex
          sudo apt-get update && sudo apt-get install -y xz-utils
          ls -alh
          ls -alh output
          xz -z -9 -T0 output/${{ needs.build-image.outputs.iso-name }}
          ls -alh
          ls -alh output

      - name: Create release with artifact
        uses: ncipollo/release-action@6c75be85e571768fa31b40abf38de58ba0397db5
        with:
          tag: "ovos-nix-${{needs.build-image.outputs.tag-name  }}"
          artifacts: "output/${{ needs.build-image.outputs.iso-name }}.xz"
          artifactErrorsFailBuild: true
